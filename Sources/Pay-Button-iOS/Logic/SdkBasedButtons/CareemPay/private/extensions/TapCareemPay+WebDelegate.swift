//
//  File.swift
//  
//
//  Created by Osama Rabie on 10/11/2023.
//

import Foundation
import UIKit
import WebKit
import SharedDataModels_iOS


/// An extension to take care of the notifications being sent from the web view through the url schemes
extension CareemPayButton:WKNavigationDelegate {
    
    public func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
        var action: WKNavigationActionPolicy?
        
        defer {
            decisionHandler(action ?? .allow)
        }
        
        guard let url = navigationAction.request.url else { return }
        
        if url.absoluteString.hasPrefix(payButtonType.webSdkScheme()) {
            //print("navigationAction", url.absoluteString)
            action = .cancel
        }else{
            print("navigationAction", url.absoluteString)
        }
        // Let us see if the web sdk is telling us something
        if( url.absoluteString.contains(payButtonType.webSdkScheme())) {
            switch url.absoluteString {
            case _ where url.absoluteString.contains(CallBackSchemeEnum.onError.rawValue):
                self.handleOnError(data: tap_extractDataFromUrl(url, for: "data", shouldBase64Decode: true))
                break
            case _ where url.absoluteString.contains(CallBackSchemeEnum.onOrderCreated.rawValue):
                delegate?.onOrderCreated?(data: tap_extractDataFromUrl(url, for: "data", shouldBase64Decode: false))
                break
            case _ where url.absoluteString.contains(CallBackSchemeEnum.onChargeCreated.rawValue):
                self.handleOnChargeCreated(data: tap_extractDataFromUrl(url, for: "data", shouldBase64Decode: true))
                break
            case _ where url.absoluteString.contains(CallBackSchemeEnum.onSuccess.rawValue):
                let _ = self.handleOnSuccess(url:url)
                break
            case _ where url.absoluteString.contains(CallBackSchemeEnum.onReady.rawValue):
                delegate?.onReady?()
                break
            case _ where url.absoluteString.contains(CallBackSchemeEnum.onClick.rawValue):
                delegate?.onClick?()
                break
            case _ where url.absoluteString.contains(CallBackSchemeEnum.onCancel.rawValue):
                let _ = self.removeCareemPayPopupEntry {
                    self.delegate?.onCanceled?()
                }
                break
            case _ where url.absoluteString.contains(CallBackSchemeEnum.onClosePopup.rawValue):
                /*let _ = self.removeGooglePayPopupEntry {
                    self.delegate?.onCanceled?()
                }*/
                break
            default:
                break
            }
        }else if url.absoluteString.hasPrefix(careemPaySDKUrlScheme) {
            action = .cancel
            // This means, careempay popup wil be displayed and we need to make our weview full screen
            // careem uses this scheme mu;tuple times during the same payments, so we need to make sure that we are nont already preseting the popup
            guard UIApplication.shared.topViewController()?.restorationIdentifier != "CareemPayVC" else { return }
            showCareemPay(for: url)
        }
    }
    
    /// Will handle & starte the redirection process when called
    /// - Parameter data: The data string fetched from the url parameter
    internal func handleOnChargeCreated(data:String) {
        // Let us pass the charge created id for the delegae
        self.delegate?.onChargeCreated?(data: data)
    }
    
    /// Handles the case and the post logic needed after getting onSuccess from the web sdk
    /// - Parameter url: The url passed from web sdk to indicae it is an onSuccess with needed data
    func handleOnSuccess(url:URL) {
        self.webView.isHidden = false
        let _ =  self.removeCareemPayPopupEntry {
            self.delegate?.onSuccess?(data: tap_extractDataFromUrl(url, for: "data", shouldBase64Decode: true))
        }
    }
    
    /// Handles the case and the post logic needed after getting onError from the web sdk
    /// - Parameter url: The url passed from web sdk to indicae it is an onError with needed data
    func handleOnError(data:String) {
        self.webView.isHidden = false
        
        let _ = self.removeCareemPayPopupEntry {
            self.delegate?.onError?(data:data)
            self.webView.isUserInteractionEnabled = true
        }
    }
    
    
    /// Will create a full screen modal to show the careem pay flow
    /// - Parameter for url: The URL generated by the careem pay sdk to complete this payment
    func showCareemPay(for url:URL) {
        // Let us init a modal view controller
        careemPayController = .init()
        careemPayController?.isModalInPresentation = true
        careemPayController?.restorationIdentifier = "CareemPayVC"
        careemPayController?.redirectionData = .init(url: url.absoluteString, id: "", powered: true, stopRedirection: false)
        careemPayController?.selectedLocale = currentlyLoadedConfigurations?.getButtonLocale() ?? "en"
        careemPayController?.threeDSCanceled = {
            self.careemPayController?.dismiss(animated: true) {
                //self.openUrl(url: self.currentlyLoadedConfigurations)
                self.handleOnCancel()
            }
        }
        // Set to web view the needed urls
        /// The redirect url scheme
        careemPayController?.redirectUrl = PayButtonTypeEnum.CareemPay.tapRedirectionSchemeUrl()
        // Set to web view what should it when the process is completed by the user
        careemPayController?.redirectionReached = { redirectionUrl in
            self.careemPayController?.dismiss(animated: true) {
                DispatchQueue.main.async {
                    // pass to the sdk
                    self.passRedirectionDataToSDK(rediectionUrl: redirectionUrl)
                }
            }
        }
        careemPayController?.startLoading()
        DispatchQueue.main.async {
            UIApplication.shared.topViewController()!.present(self.careemPayController!, animated: true)
        }
    }
    
    
    /// Will create a redirection UIView and display it alert level on top of the current screen
    /// - Parameter for redirection: The redirection model that contains the redirection URL + the redirection finished keyword
    func showRedirectionView(for redirection:Redirection) {
        // This means we are ok to start the authentication process
        threeDsView = .init()
        threeDsView?.isModalInPresentation = true
        // Set to web view the needed urls
        /// The redirect url scheme
        threeDsView?.redirectUrl = payButtonType.tapRedirectionSchemeUrl()
        threeDsView?.redirectionData = redirection
        // Set the selected card locale for correct semantic rendering
        threeDsView?.selectedLocale = currentlyLoadedConfigurations?.getButtonLocale() ?? "en"
        // Set to web view what should it when the process is canceled by the user
        threeDsView?.threeDSCanceled = {
            // dismiss the threeds page
            self.threeDsView?.dismiss(animated: true,completion: {
                self.handleOnCancel()
            })
        }
        // Hide or show the powered by tap based on coming parameter
        threeDsView?.poweredByTapView.isHidden = !(redirection.powered ?? true)
        // Set to web view what should it when the process is completed by the user
        threeDsView?.redirectionReached = { redirectionUrl in
            self.threeDsView?.dismiss(animated: true) {
                DispatchQueue.main.async {
                    self.passRedirectionDataToSDK(rediectionUrl: redirectionUrl)
                }
            }
        }
        // Set to web view what should it do when the content is loaded in the background
        threeDsView?.idleForWhile = {
            self.threeDsView?.idleForWhile = {}
            DispatchQueue.main.async {
                UIApplication.shared.topViewController()!.present(self.threeDsView!, animated: true)
            }
        }
        // Tell it to start rendering 3ds content in background
        //SwiftEntryKit.display(entry: threeDsView, using: threeDsView.swiftEntryAttributes())
        threeDsView?.startLoading()
    }
    
    /// Handles the onCancel when the user is 3ds page on careem pay card and wants to go back :)
    func handleOnCancel() {
        self.delegate?.onCanceled?()
        self.webView.evaluateJavaScript("window.cancel()")
    }
    
}



extension CareemPayButton:WKUIDelegate {
   
    public func webView(_ webView: WKWebView, createWebViewWith configuration: WKWebViewConfiguration, for navigationAction: WKNavigationAction, windowFeatures: WKWindowFeatures) -> WKWebView? {
        //let (viewController,web,_) = createBenefitPayWithAppPopupView()
        
        if let url = navigationAction.request.url {
            //print("POPUP : \(url.absoluteString)")
            /*web.load(navigationAction.request)
            DispatchQueue.main.asyncAfter(deadline: .now() + .milliseconds(500)) {
                //self.updateLoadingView(with: false)
                if let topMost:UIViewController = UIApplication.shared.topViewController() {
                    topMost.present(viewController, animated: true)
                }
            }*/
        }
        return nil
    }
}
